/*
    MySTL algorithms
*/

#ifndef __MYSTL_ALGORITHM__
#define __MYSTL_ALGORITHM__

#include <stl/iterator_traits.h>
#include <stl/reverse_iterator.h>
#include <stl/functional>
#include <stl/utility>
#include <stl/tempbuf.h>

#ifdef min
#undef min
#endif

#ifdef max
#undef max
#endif

namespace stl
{

/*
    Базовые алгоритмы (время работы всех алгоритмов этой группы O(1))
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter1,class Iter2>
void iter_swap (Iter1,Iter2);

template <class T>
void swap (T&,T&);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Возвращение случайного номера в диапазоне [0;n)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Distance>
Distance random_number (Distance n);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Минимум / максимум / медиана
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
const T& min (const T& a,const T& b);

template <class T>
const T& max (const T& a,const T& b);

template <class T>
const T& median (const T& a,const T& b,const T& c);

template <class T,class Compare>
const T& min (const T& a,const T& b,Compare less);

template <class T,class Compare>
const T& max (const T& a,const T& b,Compare less);

template <class T,class Compare>
const T& median (const T& a,const T& b,const T& c,Compare less);

/*
    Поиск
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск значения в диапазоне
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter,class T>
Iter find (Iter first,Iter last,const T& val);

template <class Iter,class Predicate>
Iter find_if (Iter first,Iter last,Predicate pred);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск одного из значений [first2;last2) в диапазоне [first1;last1)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class InIter,class Iter>
InIter find_first_of (InIter first1,InIter last1,Iter first2,Iter last2);

template <class InIter,class Iter,class Predicate>
InIter find_first_of (InIter first1,InIter last1,Iter first2,Iter last2,Predicate equal);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск смежных дубликатов в диапазоне
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter>
Iter adjacent_find (Iter first,Iter last);  

template <class Iter,class Predicate>
Iter adjacent_find (Iter first,Iter last,Predicate equal);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск первого вхождения диапазона [first2;last2) в диапазон [first1;last1)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter1,class Iter2>
Iter1 search (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2);

template <class Iter1,class Iter2,class Predicate>
Iter1 search (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,Predicate equal);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск последнего вхождения диапазона [first2;last2) в диапазон [first1;last1)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter1,class Iter2> 
Iter1 find_end (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2);

template <class Iter1,class Iter2,class Predicate> 
Iter1 find_end (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,Predicate equal);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск первого вхождения диапазона val [count] в диапазон [first1;last1)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter,class Int,class T>
Iter search_n (Iter first,Iter last,Int count,const T& val);

template <class Iter,class Int,class T,class Predicate>
Iter search_n (Iter first,Iter last,Int count,const T& val,Predicate equal);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Максимальный / минимальный элемент диапазона [first;last)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter> 
Iter max_element (Iter first,Iter last);

template <class Iter> 
Iter min_element (Iter first,Iter last);

template <class Iter,class Compare> 
Iter max_element (Iter first,Iter last,Compare less);

template <class Iter,class Compare> 
Iter min_element (Iter first,Iter last,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предикат принадлежности значения val диапазону [first;last)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter,class T>
bool binary_search (Iter first,Iter last,const T& val);

template <class Iter,class T,class Compare>
bool binary_search (Iter first,Iter last,const T& val,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Левое вхождение элемента val в диапазон [first;last)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter,class T>
Iter lower_bound (Iter first,Iter last,const T& val);

template <class Iter,class T,class Compare>
Iter lower_bound (Iter first,Iter last,const T& val,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Правое вхождение элемента val в диапазон [first;last)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter,class T>
Iter upper_bound (Iter first,Iter last,const T& val);

template <class Iter,class T,class Compare>
Iter upper_bound (Iter first,Iter last,const T& val,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Поиск поддиапазона вхождения элемента val в диапазон [first;last)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter,class T>
pair<Iter,Iter> equal_range (Iter first,Iter last,const T& val);

template <class Iter,class T,class Compare>
pair<Iter,Iter> equal_range (Iter first,Iter last,const T& val,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Количество вхождений элемента val в диапазон [first;last)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter,class T,class Size>
void count (Iter first,Iter last,const T& value,Size& n);

template <class Iter,class Predicate,class Size>
void count_if (Iter first,Iter last,Predicate equal,Size& n);

template <class Iter,class T>
typename iterator_traits<Iter>::difference_type count (Iter first,Iter last,const T& value);

template <class Iter,class Predicate>
typename iterator_traits<Iter>::difference_type count_if (Iter first,Iter last,Predicate equal);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предикат эквивалентности диапазонов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter1,class Iter2>
bool equal (Iter1 first1,Iter1 last1,Iter2 first2);

template <class Iter1,class Iter2,class BinPredicate>
bool equal (Iter1 first1,Iter1 last1,Iter2 first2,BinPredicate pred);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Определение первого несовпадающего элемента диапазонов
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter1,class Iter2>
pair<Iter1,Iter2> mismatch (Iter1 first1,Iter1 last1,Iter2 first2);

template <class Iter1,class Iter2,class BinPredicate>
pair<Iter1,Iter2> mismatch (Iter1 first1,Iter1 last1,Iter2 first2,BinPredicate pred);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Лексикографическое сравнение диапазонов
///   lexicographical_compare - return true if [first1;last1) < [first2;last2)
///   lexicographical_compare_3way - analog of strcmp
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter1,class Iter2>
bool lexicographical_compare (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2);

template <class Iter1,class Iter2,class Compare>
bool lexicographical_compare (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,Compare comp);

template <class Iter1,class Iter2>
int lexicographical_compare_3way (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2);

/*
        Работа с "кучей"
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Создание кучи из диапазона [first;last)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter> 
void make_heap (Iter first,Iter last);

template <class Iter,class Compare> 
void make_heap (Iter first,Iter last,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Помещение элемента last-1 в кучу [first;last-1)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter> 
void push_heap (Iter first,Iter last);

template <class Iter,class Compare> 
void push_heap (Iter first,Iter last,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Извлечение наибольшего элемента из кучи [first;last) и помещение в last-1
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter> 
void pop_heap (Iter first,Iter last);

template <class Iter,class Compare> 
void pop_heap (Iter first,Iter last,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Преобразование кучи [first;last) в отсортированный диапазон
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter> 
void sort_heap (Iter first,Iter last);

template <class Iter,class Compare> 
void sort_heap (Iter first,Iter last,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предикат определяющий является ли [first;last) кучей
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter>
bool is_heap (Iter first,Iter last);

template <class Iter,class Compare>
bool is_heap (Iter first,Iter last,Compare less);

/*
    Сортировка
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перемещение объектов удовлетворяющих условию в начало диапазона
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter,class Predicate>
Iter partition (Iter first,Iter last,Predicate pred);

template <class Iter,class Predicate>
Iter stable_partition (Iter first,Iter last,Predicate pred);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Размещение объектов упорядоченно относительно n-th
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter>
void nth_element (Iter first,Iter nth,Iter last);

template <class Iter,class Compare>
void nth_element (Iter first,Iter nth,Iter last,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Частичная сортировка с перемещением елементов в диапазон [first,middle) или 
///[result_first;result_last)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter>
void partial_sort (Iter first,Iter middle,Iter last);

template <class Iter,class Compare>
void partial_sort (Iter first,Iter middle,Iter last,Compare less);

template <class InIter,class OutIter>
OutIter partial_sort_copy (InIter first,InIter last,OutIter result_first,OutIter result_last);

template <class InIter,class OutIter,class Compare>
OutIter partial_sort_copy (InIter first,InIter last,OutIter result_first,OutIter result_last,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Полная сортировка интервала
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter>
void sort (Iter first,Iter last);

template <class Iter,class Compare>
void sort (Iter first,Iter last,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Полная сортировка интервала (с сохранением относительного порядка дубликатов)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter>
void stable_sort (Iter first,Iter last);

template <class Iter,class Compare>
void stable_sort (Iter first,Iter last,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Предикат определяющий отсортирован ли интервал [first;last)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter>
bool is_sorted (Iter first,Iter last);

template <class Iter,class Compare>
bool is_sorted (Iter first,Iter last,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Слияние диапазонов с сохранением относительной упорядоченности
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class InIter1,class InIter2,class OutIter>
OutIter merge (InIter1 first1,InIter1 last1,InIter2 first2,InIter2 last2,OutIter result);

template <class InIter1,class InIter2,class OutIter,class Compare>
OutIter merge (InIter1 first1,InIter1 last1,InIter2 first2,InIter2 last2,OutIter result,Compare less);

template <class Iter>
void inplace_merge (Iter first,Iter middle,Iter last);

template <class Iter,class Compare>
void inplace_merge (Iter first,Iter middle,Iter last,Compare less);

/*
    Копирование, перемещение, замена
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование диапазона (через operator =)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class InIter,class OutIter>
OutIter copy (InIter first,InIter last,OutIter result);

template <class InIter,class Size,class OutIter>
pair<InIter,OutIter> copy_n (InIter first,Size count,OutIter result);

template <class Iter1,class Iter2>
Iter2 copy_backward (Iter1 first,Iter1 last,Iter2 result);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование диапазона (через конструктор копирования)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class InIter,class OutIter>
OutIter uninitialized_copy (InIter first,InIter last,OutIter result);

template <class InIter,class Size,class OutIter>
pair<InIter,OutIter> uninitialized_copy_n (InIter first,Size count,OutIter result);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Заполнение диапазона (через operator =)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter,class T>
void fill (Iter first,Iter last,const T& val);

template <class Iter,class Size,class T>
Iter fill_n (Iter first,Size n,const T& value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Заполнение диапазона (через конструктор)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter,class T>
void uninitialized_fill (Iter first,Iter last,const T& value);

template <class Iter,class Size,class T>
Iter uninitialized_fill_n (Iter first,Size count,const T& value);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Обмен содержимого интервалов
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter1,class Iter2>
Iter2 swap_ranges (Iter1 first1,Iter1 last1,Iter2 first2);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Копирование элементов равных value из [first;last) в [result;*)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class InIter,class OutIter,class T>
OutIter remove_copy (InIter first,InIter last,OutIter result,const T& value);

template <class InIter,class OutIter,class Predicate>
OutIter remove_copy_if (InIter first,InIter last,OutIter result,Predicate pred);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление элементов равных value из интервала [first;last) (БЕЗ УДАЛЕНИЯ ИЗ КОНТЕЙНЕРА!)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter,class T>
Iter remove (Iter first,Iter last,const T& value);

template <class Iter,class Predicate>
Iter remove_if (Iter first,Iter last,Predicate pred);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Удаление дубликатов из интервала
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter>
Iter unique (Iter first,Iter last);

template <class Iter,class Predicate>
Iter unique (Iter first,Iter last,Predicate pred);

template <class InIter,class OutIter>
OutIter unique_copy (InIter first,InIter last,OutIter result);

template <class InIter,class OutIter,class Predicate>
OutIter unique_copy (InIter first,InIter last,OutIter result,Predicate pred);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Замена
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter,class T>
void replace (Iter first,Iter last,const T& old_value,const T& new_value);

template <class Iter,class Predicate,class T>
void replace_if (Iter first,Iter last,Predicate pred,const T& new_value);

template <class InIter,class OutIter,class T>
OutIter replace_copy (InIter first,InIter last,OutIter result,const T& old_value,const T& new_value);

template <class InIter,class OutIter,class Predicate,class T>
OutIter replace_copy_if (InIter first,InIter last,OutIter result,Predicate pred,const T& new_value);

/*
    Преобразования интервала
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Реверс интервала
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter>
void reverse (Iter first,Iter last);

template <class InIter,class OutIter>
OutIter reverse_copy (InIter first,InIter last,OutIter result);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перемещение подинтервала [middle;last) в начало интервала
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter>
Iter rotate (Iter first,Iter middle,Iter last);

template <class InIter,class OutIter>
OutIter rotate_copy (InIter first,InIter middle,InIter last,OutIter result);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перестановка (в лексикографическом порядке)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter>
bool next_permutation (Iter first,Iter last);

template <class Iter,class Compare>
bool next_permutation (Iter first,Iter last,Compare less);

template <class Iter>
bool prev_permutation (Iter first,Iter last);

template <class Iter,class Compare>
bool prev_permutation (Iter first,Iter last,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Перегруппировка интервала случайным образом
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter>
void random_shuffle (Iter first,Iter last);

template <class Iter,class Rand>
void random_shuffle (Iter first,Iter last,Rand rand);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Выполнение функции fn для каждого из элементов диапазона [first;last)
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class Iter,class Func>
Func for_each (Iter first,Iter last,Func fn);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Преобразование интервала при помощи функции op
///////////////////////////////////////////////////////////////////////////////////////////////////         
template <class InIter,class OutIter,class UnaryOperation>
OutIter transform (InIter first,InIter last,OutIter result,UnaryOperation op);

template <class InIter1,class InIter2,class OutIter,class BinOperation>
OutIter transform (InIter1 first1,InIter1 last1,InIter2 first2,OutIter result,BinOperation op);

/*
    Генераторы
*/

///////////////////////////////////////////////////////////////////////////////////////////////////
///Присваивание каждому элементу диапазона [first;last) значения функции gen
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter,class Generator> 
void generate (Iter first,Iter last,Generator gen);

template <class Iter,class Size,class Generator> 
void generate_n (Iter first,Size count,Generator gen);

/*
    Теоретико-множественные операции
*/

//////////////////////////////////////////////////////////////////////////////////////////////////////
///Предикат проверки вхождения диапазона [first2;last2) в диапазон [first1;last1) (порядок не важен)
//////////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter1,class Iter2>
bool includes (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2);

template <class Iter1,class Iter2,class Compare>
bool includes (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Теоретико-множественное объединение двух интервалов (ala or)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter1,class Iter2,class OutIter>
OutIter set_union (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,OutIter result);

template <class Iter1,class Iter2,class OutIter,class Compare>
OutIter set_union (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,OutIter result,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Теоретико-множественное пересечение двух интервалов (ala and)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter1,class Iter2,class OutIter>
OutIter set_intersection (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,OutIter result);

template <class Iter1,class Iter2,class OutIter,class Compare>
OutIter set_intersection (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,OutIter result,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Теоретико-множественная разность двух интервалов (ala diff)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter1,class Iter2,class OutIter>
OutIter set_difference (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,OutIter result);

template <class Iter1,class Iter2,class OutIter,class Compare>
OutIter set_difference (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,OutIter result,Compare less);

///////////////////////////////////////////////////////////////////////////////////////////////////
///Теоретико-множественная симметричная разность двух интервалов (ala xor)
///////////////////////////////////////////////////////////////////////////////////////////////////
template <class Iter1,class Iter2,class OutIter>
OutIter set_symmetric_difference (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,OutIter result);

template <class Iter1,class Iter2,class OutIter,class Compare>
OutIter set_symmetric_difference (Iter1 first1,Iter1 last1,Iter2 first2,Iter2 last2,OutIter result,Compare less);

#include <stl/detail/algorithm.inl>
#include <stl/detail/heap.inl>
#include <stl/detail/sort.inl>
#include <stl/detail/setalgo.inl>

}

#endif
